// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  nickname    String?
  avatar      String?
  role        UserRole @default(USER)
  preferences Json?    // 用户偏好设置（日语学习偏好等）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联表
  recognitions Recognition[]
  collections  Collection[]
  favorites    Favorite[]
  lyrics       UserLyric[]
  sessions     Session[]

  @@map("users")
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// 用户会话表（用于认证）
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// 歌曲信息表
model Song {
  id          String   @id @default(cuid())
  title       String
  artist      String
  album       String?
  duration    Int?     // 歌曲时长（秒）
  releaseYear Int?
  genre       String?  // 音乐类型（J-POP, 动漫歌曲等）
  coverUrl    String?  // 封面图片URL
  audioUrl    String?  // 音频文件URL
  isJapanese  Boolean  @default(true)
  metadata    Json?    // 其他元数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联表
  lyrics       Lyric[]
  recognitions Recognition[]
  favorites    Favorite[]
  collections  CollectionSong[]

  @@index([title, artist])
  @@map("songs")
}

// 歌词表（支持多语言显示）
model Lyric {
  id           String   @id @default(cuid())
  songId       String
  content      String   // 原始日语歌词
  kanji        String?  // 汉字版本
  hiragana     String?  // 平假名版本
  romaji       String?  // 罗马音版本
  translation  String?  // 中文翻译
  timeStamps   Json?    // 时间戳信息 [{time: number, text: string}]
  version      Int      @default(1)
  status       LyricStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  // 关联表
  userLyrics UserLyric[]

  @@map("lyrics")
}

// 歌词状态枚举
enum LyricStatus {
  PENDING     // 待审核
  APPROVED    // 已通过
  REJECTED    // 已拒绝
  PROCESSING  // 处理中
}

// 用户自定义歌词表
model UserLyric {
  id       String @id @default(cuid())
  userId   String
  lyricId  String
  content  String // 用户编辑的歌词内容
  notes    String? // 用户笔记
  isPublic Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lyric Lyric @relation(fields: [lyricId], references: [id], onDelete: Cascade)

  @@unique([userId, lyricId])
  @@map("user_lyrics")
}

// 音乐识别记录表
model Recognition {
  id          String            @id @default(cuid())
  userId      String?
  audioUrl    String           // 录音文件URL
  songId      String?          // 识别出的歌曲ID
  confidence  Float?           // 识别置信度
  status      RecognitionStatus
  result      Json?            // 识别结果详情
  processTime Int?             // 处理时间（毫秒）
  createdAt   DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  song Song? @relation(fields: [songId], references: [id], onDelete: SetNull)

  @@map("recognitions")
}

// 识别状态枚举
enum RecognitionStatus {
  PROCESSING  // 处理中
  SUCCESS     // 成功
  FAILED      // 失败
  TIMEOUT     // 超时
}

// 收藏夹表
model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  category    String?  // 分类（学习中、已掌握等）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs CollectionSong[]

  @@map("collections")
}

// 收藏夹歌曲关联表
model CollectionSong {
  id           String   @id @default(cuid())
  collectionId String
  songId       String
  addedAt      DateTime @default(now())
  notes        String?  // 用户备注

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  song       Song       @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([collectionId, songId])
  @@map("collection_songs")
}

// 用户收藏表（快速收藏，不分类）
model Favorite {
  id     String @id @default(cuid())
  userId String
  songId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("favorites")
}

// 系统配置表
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// AI处理日志表
model AIProcessLog {
  id          String   @id @default(cuid())
  type        String   // 处理类型（lyric_convert, song_recognition等）
  inputData   Json     // 输入数据
  outputData  Json?    // 输出数据
  apiProvider String   // API提供商（DeepSeek等）
  tokens      Int?     // 消耗的token数量
  cost        Float?   // 成本
  duration    Int?     // 处理时长（毫秒）
  status      String   // 处理状态
  error       String?  // 错误信息
  createdAt   DateTime @default(now())

  @@map("ai_process_logs")
}
