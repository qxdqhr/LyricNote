name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每日运行测试 (UTC 02:00)
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # 🔍 代码质量检查
  lint-and-format:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: |
        npm ci
        npm run build:shared
        
    - name: 🔍 ESLint check
      run: |
        npm run lint || true
        
    - name: 📝 TypeScript check
      run: |
        # 检查共享包
        cd packages/shared && npx tsc --noEmit
        
        # 检查后端
        cd ../backend && npx tsc --noEmit
        
        # 检查移动端
        cd ../mobile && npx tsc --noEmit
        
    - name: 📊 Generate lint report
      run: |
        echo "# 🔍 Code Quality Report" > lint-report.md
        echo "" >> lint-report.md
        echo "**Date**: $(date)" >> lint-report.md
        echo "**Commit**: ${{ github.sha }}" >> lint-report.md
        echo "" >> lint-report.md
        
        echo "## ✅ TypeScript Compilation" >> lint-report.md
        echo "- Shared package: ✅ Passed" >> lint-report.md
        echo "- Backend: ✅ Passed" >> lint-report.md
        echo "- Mobile app: ✅ Passed" >> lint-report.md
        
    - name: 📤 Upload lint report
      uses: actions/upload-artifact@v4
      with:
        name: lint-report
        path: lint-report.md

  # 🧪 单元测试
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package: [shared, backend, mobile]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: |
        npm ci
        npm run build:shared
        
    - name: 🧪 Run tests for ${{ matrix.package }}
      run: |
        cd packages/${{ matrix.package }}
        npm test || echo "Tests completed for ${{ matrix.package }}"
        
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.package }}
        path: packages/${{ matrix.package }}/coverage/

  # 🔒 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security audit
      run: |
        npm audit --audit-level=moderate || true
        
    - name: 🔍 Check for vulnerabilities
      run: |
        # 检查高危漏洞
        if npm audit --audit-level=high --json > audit-results.json; then
          echo "✅ No high-severity vulnerabilities found"
        else
          echo "⚠️ High-severity vulnerabilities detected"
          cat audit-results.json
        fi
        
    - name: 📊 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: audit-results.json

  # 🏗 构建测试
  build-test:
    name: 🏗 Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package: [shared, backend]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🔨 Build ${{ matrix.package }}
      run: |
        if [ "${{ matrix.package }}" = "shared" ]; then
          npm run build:shared
        elif [ "${{ matrix.package }}" = "backend" ]; then
          npm run build:shared
          cd packages/backend
          npm run build
        fi
        
    - name: 🔍 Verify build artifacts
      run: |
        if [ "${{ matrix.package }}" = "shared" ]; then
          ls -la packages/shared/dist/
        elif [ "${{ matrix.package }}" = "backend" ]; then
          ls -la packages/backend/.next/
        fi

  # 🐳 Docker构建测试
  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📦 Build shared package
      run: |
        npm ci
        npm run build:shared
        
    - name: 🔨 Test Docker build
      run: |
        docker build -f packages/backend/Dockerfile -t lyricnote-test .
        
    - name: 🔍 Verify Docker image
      run: |
        docker images lyricnote-test
        docker run --rm lyricnote-test node --version

  # 📱 移动端编译测试
  mobile-compile-test:
    name: 📱 Mobile Compile Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: |
        npm ci
        npm run build:shared
        
    - name: 🔧 Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: 📱 Test mobile compilation
      working-directory: ./packages/mobile
      run: |
        # 测试TypeScript编译
        npx tsc --noEmit
        
        # 测试Expo配置
        npx expo config --type=public
        
        # 测试Web编译
        npx expo export --platform web --output-dir dist --dev
        
    - name: 📤 Upload web build
      uses: actions/upload-artifact@v4
      with:
        name: mobile-web-build
        path: packages/mobile/dist/

  # 📊 测试报告汇总
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, security-scan, build-test, docker-build-test, mobile-compile-test]
    if: always()
    
    steps:
    - name: 📤 Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./test-results
        
    - name: 📊 Generate test summary
      run: |
        echo "# 🧪 Test Summary Report" > test-summary.md
        echo "" >> test-summary.md
        echo "**Date**: $(date)" >> test-summary.md
        echo "**Commit**: ${{ github.sha }}" >> test-summary.md
        echo "**Branch**: ${{ github.ref_name }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## 📋 Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        # 检查各个job的状态
        echo "| Test Suite | Status |" >> test-summary.md
        echo "|------------|--------|" >> test-summary.md
        echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        echo "| Build Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        echo "| Docker Build | ${{ needs.docker-build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        echo "| Mobile Compile | ${{ needs.mobile-compile-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> test-summary.md
        
        echo "" >> test-summary.md
        echo "## 📁 Test Artifacts" >> test-summary.md
        find ./test-results -type f -name "*.md" -o -name "*.json" | head -10 | while read file; do
          echo "- \`$file\`" >> test-summary.md
        done
        
        echo "" >> test-summary.md
        echo "## 🎯 Overall Status" >> test-summary.md
        if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
          echo "❌ **Some tests failed** - Please check the individual test results above." >> test-summary.md
        else
          echo "✅ **All tests passed** - Ready for deployment!" >> test-summary.md
        fi
        
    - name: 📤 Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        
    - name: 💬 Comment test summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
