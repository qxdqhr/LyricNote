name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Aliyun Registry
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login \
            --username="${{ secrets.ALIYUN_USERNAME }}" \
            --password-stdin crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com || exit 1

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t lyricnote-backend:amd64 --load -f ./packages/backend/Dockerfile .

      - name: Tag Docker image
        run: |
          NEW_TAG=${{ github.run_number }}
          docker tag lyricnote-backend:amd64 crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}

      - name: Push Docker image
        run: |
          NEW_TAG=${{ github.run_number }}
          docker push crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          script: |
            NEW_TAG=${{ github.run_number }}
            docker pull crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}
            docker stop lyricnote-backend || true
            docker rm lyricnote-backend || true
            # 确保环境文件存在
            if [ -f ".env.production" ]; then
              echo "找到 .env.production 文件"
              docker run -d -p 3001:3000 --name lyricnote-backend \
                --env-file .env.production \
                crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}
            else
              echo "未找到 .env.production 文件，使用默认配置"
              docker run -d -p 3001:3000 --name lyricnote-backend \
                crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}
            fi
            
            # 等待容器启动并进行健康检查
            echo "等待容器启动..."
            sleep 10
            if docker ps | grep lyricnote-backend; then
              echo "✅ 容器启动成功！"
              echo "🌐 应用访问地址: http://qhr062.top:3001"
            else
              echo "❌ 容器启动失败！"
              docker logs lyricnote-backend
              exit 1
            fi
