name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # 代码质量检查
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format:check

  # 构建测试
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages with Turbo
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            packages/*/.next
          retention-days: 7

  # Docker 构建和部署
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Registry
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login \
            --username="${{ secrets.ALIYUN_USERNAME }}" \
            --password-stdin crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com || exit 1

      - name: Set up build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${{ github.run_number }}
            crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          script: |
            NEW_TAG=${{ github.run_number }}

            # 设置端口（默认 3000）
            BACKEND_PORT=${BACKEND_PORT:-3002}
            echo "📍 目标端口: ${BACKEND_PORT}"

            # 停止并移除所有 lyricnote-backend 容器
            echo "🔄 清理旧容器..."
            docker ps -a | grep lyricnote-backend | awk '{print $1}' | xargs -r docker stop || true
            docker ps -a | grep lyricnote-backend | awk '{print $1}' | xargs -r docker rm -f || true

            # 强制清理占用端口的所有进程
            echo "🔍 检查端口 ${BACKEND_PORT} 占用情况..."
            PORT_PIDS=$(lsof -ti:${BACKEND_PORT} 2>/dev/null || true)
            if [ ! -z "$PORT_PIDS" ]; then
              echo "⚠️  发现以下进程占用端口 ${BACKEND_PORT}: $PORT_PIDS"
              echo "🔪 强制终止这些进程..."
              echo "$PORT_PIDS" | xargs -r kill -9 || true
              sleep 3
              echo "✅ 进程已清理"
            else
              echo "✅ 端口 ${BACKEND_PORT} 未被占用"
            fi

            # 再次确认端口已释放
            echo "🔍 再次检查端口状态..."
            REMAINING=$(lsof -ti:${BACKEND_PORT} 2>/dev/null || true)
            if [ ! -z "$REMAINING" ]; then
              echo "⚠️  端口仍被占用,强制清理..."
              echo "$REMAINING" | xargs -r kill -9 || true
              sleep 5
            fi

            # 拉取新镜像
            echo "📥 拉取新镜像 tag:${NEW_TAG}..."
            docker pull crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}

            # 清理旧镜像（保留最新的2个版本）
            echo "🧹 清理旧镜像..."
            docker images | grep lyricnote/lyricnote | awk '{print $3}' | tail -n +3 | xargs -r docker rmi || true

            # 启动新容器
            echo "🚀 启动新容器..."

            if [ -f ".env.production" ]; then
              echo "📄 使用 .env.production 配置"
              docker run -d -p ${BACKEND_PORT}:3000 --name lyricnote-backend \
                --restart unless-stopped \
                --env-file .env.production \
                crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}
            else
              echo "⚠️  未找到 .env.production，使用默认配置"
              docker run -d -p ${BACKEND_PORT}:3000 --name lyricnote-backend \
                --restart unless-stopped \
                crpi-pnnot5dqi45utyya.cn-beijing.personal.cr.aliyuncs.com/lyricnote/lyricnote:${NEW_TAG}
            fi

            # 健康检查
            echo "🏥 等待容器启动并进行健康检查..."
            sleep 10

            if docker ps | grep lyricnote-backend; then
              echo "✅ 容器启动成功！"
              echo "🌐 应用访问地址: http://qhr062.top:${BACKEND_PORT}"
              echo "📍 容器端口映射: ${BACKEND_PORT}:3000"
              echo "📊 容器状态:"
              docker ps | grep lyricnote-backend
              echo "📝 最新日志:"
              docker logs --tail 20 lyricnote-backend
            else
              echo "❌ 容器启动失败！"
              echo "📝 完整日志:"
              docker logs lyricnote-backend
              exit 1
            fi
